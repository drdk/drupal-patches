diff --git a/manualcrop.admin.inc b/manualcrop.admin.inc
index ab4f40b..fb14ec0 100644
--- a/manualcrop.admin.inc
+++ b/manualcrop.admin.inc
@@ -24,6 +24,13 @@ function manualcrop_global_settings_form() {
     '#default_value' => variable_get('manualcrop_skip_js_check', FALSE),
   );
 
+  $form['manualcrop_crop_per_instance'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable crop per instance'),
+    '#description' => t('Allow a crop to be related to the referencing entity as well as the image'),
+    '#default_value' => variable_get('manualcrop_crop_per_instance', FALSE),
+  );
+
   $form['#submit'] = array('manualcrop_global_settings_form_submit');
 
   return system_settings_form($form);
diff --git a/manualcrop.helpers.inc b/manualcrop.helpers.inc
index 3d34b23..e19f954 100644
--- a/manualcrop.helpers.inc
+++ b/manualcrop.helpers.inc
@@ -177,7 +177,6 @@ function manualcrop_croptool_process(&$form, &$form_state, &$element, $file, $se
           return FALSE;
         }
       }
-
       // Required image styles.
       $required = manualcrop_instance_required_styles($settings);
 
@@ -245,12 +244,27 @@ function manualcrop_croptool_process(&$form, &$form_state, &$element, $file, $se
       );
 
       // Get the crop selections for this file.
+      // Overrule selections if the current referencing entity is present.
       $submitted = (isset($form_state['inline_entity_form']) ? FALSE : $form_state['submitted']);
       if (!$submitted && !isset($value['manualcrop_selections'])) {
         $value['manualcrop_selections'] = array();
-        foreach (manualcrop_load_crop_selection($file->uri) as $data) {
-          $value['manualcrop_selections'][$data->style_name] = $data->x . '|' . $data->y . '|' . $data->width . '|' . $data->height;
+        $type = $form_state['instance_info']['entity_type'];
+        $rid = $form_state['instance_info']['entity_id'];
+        $selections_temp = array();
+        $saved_crops = manualcrop_load_crop_selection($file->uri);
+
+        foreach ($saved_crops as $style_name => $crops) {
+          foreach ($crops as $data) {
+            if (($data['referencing_entity_type'] == $type) && ($data['referencing_entity_id'] == $rid)) {
+              $selections_temp[$data['style_name']] = $data['x'] . '|' . $data['y'] . '|' . $data['width'] . '|' . $data['height'];
+            }
+            elseif (empty($data['referencing_entity_type']) && empty($selections_temp[$data['style_name']])) {
+              $selections_temp[$data['style_name']] = $data['x'] . '|' . $data['y'] . '|' . $data['width'] . '|' . $data['height'];
+            }
+          }
+
         }
+        $value['manualcrop_selections'] = $selections_temp;
       }
 
       // Add the dependencies and croptool.
@@ -457,7 +471,6 @@ function _manualcrop_add_croptool(&$element, $value, &$form_state, $fid, $js_ide
         'onchange' => 'ManualCrop.selectionStored(this, ' . $fid . ', \'' . $style_name . '\');',
       ),
     );
-
     $style_options[$style_name] = $info['label'];
   }
 
@@ -544,6 +557,39 @@ function _manualcrop_add_croptool(&$element, $value, &$form_state, $fid, $js_ide
     ));
   }
 
+  // If the crop by use instance is enabled, add hidden fields with information about the
+  // referencing entity.
+  if (variable_get('manualcrop_crop_per_instance', FALSE)) {
+
+    $type = empty($form_state['instance_info']['entity_type']) ?
+      '' :
+      $form_state['instance_info']['entity_type'];
+
+    $id = 0;
+
+    if (!($id = $form_state['instance_info']['entity_id']) && !empty($element['#entity'])) {
+      $id = array_shift(entity_extract_ids($type, $element['#entity']));
+    }
+
+    if (!empty($type)) {
+      $element['manualcrop_message'] = array(
+        '#markup' => '<div class="manualcrop-message">' .
+          t('Changes in cropping will only impact this instance.') .
+          '</div>'
+      );
+    }
+
+    $element['manualcrop_entity_type'] = array(
+      '#type' => 'hidden',
+      '#value' => $type,
+    );
+
+    $element['manualcrop_entity_id'] = array(
+      '#type' => 'hidden',
+      '#value' => $id,
+    );
+  }
+
   // The FAPI widget can have a alt and/or title field, increase their weight.
   if (isset($element['alt'])) {
     $element['alt']['#weight']++;
@@ -575,6 +621,8 @@ function _manualcrop_process_file_entity_form(&$form, &$form_state, $instance_in
     }
   }
 
+  $form_state['instance_info'] = $instance_info;
+
   // No valid fields instance specified, use the File Entity settings.
   if (!isset($settings)) {
     $settings = variable_get('manualcrop_file_entity_settings_' . $form['#entity']->type, manualcrop_default_widget_settings());
@@ -607,22 +655,40 @@ function _manualcrop_process_file_entity_form(&$form, &$form_state, $instance_in
 function manualcrop_save_crop_data($file, $data) {
   // If file_entity_revisions isn't enabled, use 0.
   $vid = (isset($file->vid) ? $file->vid : 0);
+  global $user;
+
+  $referencing_entity_id = 0;
+  $referencing_entity_type = '';
+
+  // Establish referencing entity.
+  foreach ($data as $selection) {
+    if (!empty($selection['referencing_entity_type'])) {
+      $referencing_entity_type = $selection['referencing_entity_type'];
+      $referencing_entity_id = (int) $selection['referencing_entity_id'];
+    }
+  }
 
   // Delete the existing data.
-  db_delete('manualcrop')
-    ->condition('fid', $file->fid)
-    ->condition('vid', $vid)
-    ->condition('style_name', array_keys($data))
-    ->execute();
+  $delete = db_delete('manualcrop')
+      ->condition('fid', $file->fid)
+      ->condition('vid', $vid)
+      ->condition('style_name', array_keys($data));
+
+  if (variable_get('manualcrop_crop_per_instance', FALSE) && !empty($referencing_entity_type)) {
+    $delete->condition('referencing_entity_type', $referencing_entity_type)
+        ->condition('referencing_entity_id', $referencing_entity_id);
+  }
 
+  $delete->execute();
   // Save the new crop selections.
   foreach ($data as $style_name => $selection) {
     if ($selection) {
       $record = array_merge($selection, array(
         'fid' => $file->fid,
         'vid' => $vid,
-        'style_name' => $style_name
+        'style_name' => $style_name,
       ));
+
       drupal_write_record('manualcrop', $record);
     }
   }
@@ -658,7 +724,7 @@ function manualcrop_load_crop_selection($file, $style_name = NULL) {
   }
 
   if (isset($style_name)) {
-    $result = db_query('SELECT c.x, c.y, c.width, c.height FROM {manualcrop} c INNER JOIN {' . $table . '} f ON c.' . $key . ' = f.' . $key . ' WHERE c.style_name = :name AND f.uri = :uri', array(
+    $result = db_query('SELECT c.x, c.y, c.width, c.height, c.referencing_entity_type, c.referencing_entity_id FROM {manualcrop} c INNER JOIN {' . $table . '} f ON c.' . $key . ' = f.' . $key . ' WHERE c.style_name = :name AND f.uri = :uri', array(
       ':name' => $style_name,
       ':uri' => $file,
     ));
@@ -666,11 +732,16 @@ function manualcrop_load_crop_selection($file, $style_name = NULL) {
     return $result->fetchObject();
   }
   else {
-    $result = db_query('SELECT c.style_name, c.x, c.y, c.width, c.height FROM {manualcrop} c INNER JOIN {' . $table . '} f ON c.' . $key . ' = f.' . $key . ' WHERE f.uri = :uri', array(
+    $result = db_query('SELECT c.style_name, c.x, c.y, c.width, c.height, c.referencing_entity_type, c.referencing_entity_id FROM {manualcrop} c INNER JOIN {' . $table . '} f ON c.' . $key . ' = f.' . $key . ' WHERE f.uri = :uri', array(
       ':uri' => $file,
     ));
 
-    return $result->fetchAllAssoc('style_name');
+    $styles = array();
+    while ($style = $result->fetchAssoc()) {
+      $styles[$style['style_name']][] = $style;
+    }
+    return $styles;
+    //return $result->fetchAllAssoc('style_name');
   }
 }
 
diff --git a/manualcrop.install b/manualcrop.install
index 194c0cb..ab5f184 100644
--- a/manualcrop.install
+++ b/manualcrop.install
@@ -138,6 +138,27 @@ function manualcrop_schema() {
         'unsigned' => TRUE,
         'not null' => TRUE,
       ),
+      'referencing_entity_type' => array(
+        'description' => 'Type of the entity referencing the image.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'referencing_entity_id' => array(
+        'description' => 'ID of the entity referencing the image.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'uid' => array(
+        'description' => 'ID of the user performing the crop.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
     ),
     'foreign keys' => array(
       'file' => array(
@@ -146,6 +167,9 @@ function manualcrop_schema() {
       ),
     ),
     'primary key' => array('fid', 'vid', 'style_name'),
+    'indexes' => array(
+      'referencing_entity' => array('fid', 'referencing_entity_id', 'referencing_entity_type'),
+    ),
   );
 
   return $schema;
@@ -374,6 +398,43 @@ function manualcrop_update_7108() {
 }
 
 /**
+ * Add fields for referencing entity to make use case specific crops.
+ *
+ * The user ID column is mainly required for new entitties
+ * where an entity ID is not yet available.
+ */
+function manualcrop_update_7109() {
+  db_add_field('manualcrop', 'referencing_entity_type', array(
+    'description' => 'Type of the entity referencing the image.',
+    'type' => 'varchar',
+    'length' => 255,
+    'not null' => TRUE,
+    'default' => '',
+  ));
+
+  db_add_field('manualcrop', 'referencing_entity_id', array(
+    'description' => 'ID of the entity referencing the image.',
+    'type' => 'int',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'default' => 0,
+  ));
+
+  db_add_field('manualcrop', 'uid', array(
+    'description' => 'ID of the user performing the crop.',
+    'type' => 'int',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'default' => 0,
+  ));
+
+  db_add_index('manualcrop', 'referencing_entity', array('fid', 'referencing_entity_id', 'referencing_entity_type'));
+  // Update the primary key so it includes the referencing entity.
+  db_drop_primary_key('manualcrop');
+  db_add_primary_key('manualcrop', array('fid', 'vid', 'style_name', 'referencing_entity_id', 'referencing_entity_type'));
+}
+
+/**
  * Grant the crop permission to all user roles.
  */
 function _manualcrop_grant_crop_permission() {
diff --git a/manualcrop.module b/manualcrop.module
index aba9e0c..44a6d2f 100644
--- a/manualcrop.module
+++ b/manualcrop.module
@@ -269,7 +269,7 @@ function manualcrop_field_widget_form_alter(&$element, &$form_state, $context) {
     $widget = $context['instance']['widget'];
 
     if (manualcrop_supported_widgets($widget['type'])) {
-      if ($widget['type'] == 'media_generic') {
+      if (in_array($widget['type'], array('media_generic', 'media_multiselect'))) {
         // We don't check if Manual Crop is enabled, this happens in the file
         // entity edit form.
         if (!_manualcrop_media_element_add_after_build($element)) {
@@ -315,6 +315,7 @@ function manualcrop_manualcrop_supported_widgets() {
   return array(
     'image_image' => array('thumblist', 'inline_crop', 'instant_crop'),
     'image_miw' => array('thumblist', 'inline_crop', 'instant_crop'),
+    'media_multiselect' => array('thumblist', 'inline_crop'),
     'media_generic' => array('thumblist', 'inline_crop'),
     'linkimagefield_widget' => array('thumblist', 'inline_crop', 'instant_crop'),
   );
@@ -393,11 +394,14 @@ function manualcrop_insert_content($item, $style, $widget) {
  *   The element to process.
  */
 function manualcrop_media_element_process($element) {
+  $entity_id = entity_extract_ids($element['#entity_type'], $element['#entity']);
+
   $data = array(
     'manualcrop' => array(
       'entity_type' => $element['#entity_type'],
       'bundle' => $element['#bundle'],
       'field_name' => $element['#field_name'],
+      'entity_id' => (int) $entity_id[0],
     )
   );
 
@@ -427,10 +431,15 @@ function manualcrop_media_element_process($element) {
  * Element validation handler; Validates each crop selection.
  */
 function manualcrop_croptool_validate($element, &$form_state) {
+
   if (!empty($form_state['manualcrop_data']['images']) && (!isset($form_state['triggering_element']) || !in_array($form_state['triggering_element']['#value'], array(t('Upload'), t('Remove'))))) {
+
+    global $user;
+
     // Create a new key, to store processed selections, in the data array.
     $form_state['manualcrop_data']['selections'] = array();
     $selections = &$form_state['manualcrop_data']['selections'];
+    $per_instance = variable_get('manualcrop_crop_per_instance', FALSE);
 
     // Loop trough the positions to get the Manual Crop data.
     foreach ($form_state['manualcrop_data']['images'] as $fid => $image) {
@@ -475,6 +484,19 @@ function manualcrop_croptool_validate($element, &$form_state) {
                     'width' => $crop[2],
                     'height' => $crop[3],
                   );
+
+                  // Add data for relating a crop to an instance.
+                  // Set the 'per instance' required values.
+                  if ($per_instance &&
+                    !empty($form_state['instance_info']['entity_type'])) {
+
+                    $entity_id = $form_state['instance_info']['entity_id'];
+                    $entity_type = $form_state['instance_info']['entity_type'];
+
+                    $selections[$fid]['styles'][$style_name]['referencing_entity_type'] = $entity_type;
+                    $selections[$fid]['styles'][$style_name]['referencing_entity_id'] = $entity_id;
+                    $selections[$fid]['styles'][$style_name]['uid'] = $user->uid;
+                  }
                   continue;
                 }
               }
@@ -496,6 +518,7 @@ function manualcrop_croptool_validate($element, &$form_state) {
             )));
           }
         }
+        $form_state['file']->manualcrop_data = $form_state['manualcrop_data'];
       }
     }
   }
@@ -549,17 +572,57 @@ function manualcrop_file_presave($file) {
 /**
  * Implements hook_file_entity_update().
  */
-function manualcrop_entity_update($file, $type) {
+function manualcrop_entity_update($entity, $type) {
+/*
+  // Clean up crops for images no longer referenced.
+  if (variable_get('manualcrop_crop_per_instance', FALSE)) {
+    $field_info = field_info_instances($type, $entity->type);
+    $fields = array_keys($field_info);
+    $entity_id = array_shift(entity_extract_ids($type, $entity));
+
+    $fids_to_keep = array();
+    $run_cleanup = FALSE;
+    $metadata_wrapper = entity_metadata_wrapper($type, $entity);
+
+    // If the field is a file reference, check if the fid was among
+    // the crops and update the record.
+    foreach ($fields as $field_name) {
+
+      $value = $metadata_wrapper->$field_name->value();
+      if (is_array($value) &&
+        !empty($value[0]) &&
+        is_array($value[0]) &&
+        !empty($value[0]['fid'])) {
+        $run_cleanup = TRUE;
+        foreach ($value as $delta => $file) {
+          $fids_to_keep[] = $file['fid'];
+        }
+      }
+    }
+
+    if ($run_cleanup) {
+
+      $delete = db_delete('manualcrop')
+          ->condition('referencing_entity_id', $entity_id)
+          ->condition('referencing_entity_type', $type);
+
+      if (!empty($fids_to_keep)) {
+        $delete->condition('fid', $fids_to_keep, 'NOT IN');
+      }
+      $delete->execute();
+    }
+  }
+*/
   // This uses hook_entity_update to guarantee it comes after the revision has
   // been saved, which uses hook_file_update().
   // Bail if it's not a file or presave() did not give us new data to write.
-  if ($type != 'file' || empty($file->manualcrop_data)) {
+  if ($type != 'file' || empty($entity->manualcrop_data)) {
     return;
   }
 
   // Make a copy of revisioned data when the new revision is created so that it
   // can be cropped without harming the prior revision.
-  manualcrop_save_crop_data($file, $file->manualcrop_data);
+  manualcrop_save_crop_data($entity, $entity->manualcrop_data['selections'][$entity->fid]['styles']);
 
   if (variable_get('manualcrop_cache_control', TRUE)) {
     // Clear the cached image paths.
@@ -568,6 +631,56 @@ function manualcrop_entity_update($file, $type) {
 }
 
 /**
+ * Implements hook_entity_insert().
+ *
+ * Get the user´s latest entry in the manualcrop table and update it to link to the current entity.
+ */
+function manualcrop_entity_insert($entity, $type) {
+  global $user;
+
+  $unassigned_crops = db_query('SELECT c.* FROM {manualcrop} c WHERE '
+    . 'c.referencing_entity_type = :type AND c.referencing_entity_id = 0 AND c.uid = :uid',
+    array(
+      ':uid' => $user->uid,
+      ':type' => $type,
+    ))->fetchAllAssoc('style_name');
+
+  if (empty($unassigned_crops)) {
+    return;
+  }
+
+  // Gather the relevant fids to update all in one query.
+  $fids_to_update = array();
+  foreach ($unassigned_crops as $crop_type => $crop) {
+    $fids_to_update[] = $crop->fid;
+  }
+
+  $field_info = field_info_instances($type, $entity->type);
+  $fields = array_keys($field_info);
+  $entity_id = entity_extract_ids($type, $entity);
+
+  // Iterate through the fields to check for cropped images (may be done more efficient).
+  foreach ($fields as $field_name) {
+    // If the field is a file reference, check if the fid was among the crops and update the record.
+    if (!empty($entity->$field_name[LANGUAGE_NONE]) && !empty($entity->$field_name[LANGUAGE_NONE][0]['fid'])) {
+      foreach ($entity->$field_name[LANGUAGE_NONE] as $delta => $file) {
+        if (in_array($file->fid, $crop_fids)) {
+          $fids_to_update[] = $file->fid;
+        }
+      }
+    }
+  }
+
+  $updated = db_update('manualcrop')
+    ->fields(array('referencing_entity_id' => $entity_id[0]))
+    ->condition('referencing_entity_id', 0)
+    ->condition('referencing_entity_type', $type)
+    ->condition('fid', $fids_to_update, 'IN')
+    ->condition('uid', $user->uid)
+    ->execute();
+}
+
+/**
  * Preprocessing for theme_image(); Force reloading of an image after re-cropping.
  */
 function manualcrop_preprocess_image(&$variables) {
@@ -578,7 +691,7 @@ function manualcrop_preprocess_image(&$variables) {
       $variables['path'] = $url;
     }
   }
-}
+  }
 
 /**
  * Preprocessing for theme_image_url_formatter(); Force reloading of an image after re-cropping.
